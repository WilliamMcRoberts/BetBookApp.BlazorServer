@page "/CreateParleyBet"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IBetData betData
@inject IGameData gameData
@inject ITeamData teamData
@inject IHouseAccountData houseData
@inject IParleyBetData parleyData
@inject IConfiguration config
@inject IGameService gameService

<PageTitle>CREATE A PARLEY BET</PageTitle>

<div class="info-label-container">
    <h3 style="font-weight: 700;margin-top: 1em;margin-bottom:0;margin-left:9.5em;">@gamesAvailable.Count Available Games</h3>
    @if (chosenGamesAndWinners.Count < 5)
    {
        <div style="margin-top:1em;font-size:15px;margin-right:18em;">
            <h6 style="font-weight:700;">1. SELECT A WINNER FOR UP TO 5 GAMES</h6>
            <h6 style="font-weight:700;">2. ENTER A WAGER AMOUNT THEN CLICK "SUBMIT"</h6>
        </div>
    }
    else
    {
        <div style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin-right:13.5em;">* GAME LIMIT *</div>
    }
    @if(betCountBad)
    {
        <div style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin-right:13.5em;">YOU MUST PICK AT LEAST 2 GAMES FOR A PARLEY</div>
    }
    @if(gameNotStarted == false)
    {
        <div style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin-right:13.5em;">ONE OF THE GAMES YOU'VE CHOSEN HAS ALREADY STARTED..TRY AGAIN</div>

    }
</div>
<div class="parley-bet-game-list-section">
    @if(wagerSubmitted == false)
    {
        <div style="width:100%;">
            @foreach(GameModel game in gamesAvailable)
            {
                @if (!chosenGamesAndWinners.ContainsKey(game))
                {
                    <div class="parley-game-item-unchosen" >
                        <div class="parley-game-title">
                            <div class="parley-helmet-icon-away">
                                <img style="height:80px;" src="/images/@game.AwayTeam.ImagePath" alt="team logo">
                            </div>
                            <div style="margin-top: 1em;">
                                <h3 style="font-weight:700">@game.AwayTeam.TeamName At @game.HomeTeam.TeamName @game.PointSpreadDescription</h3>
                                <h3 style="font-size:20px;font-weight:700;">@game.DateOfGameOnly at @game.TimeOfGameOnly pm</h3>
                            </div>
                            <div class="parley-helmet-icon-home">
                                <img style="height:80px;" src="/images/@game.HomeTeam.ImagePath" alt="team logo">
                            </div>
                        </div>
                        @if(chosenGamesAndWinners.ContainsValue(game.HomeTeam.TeamName))
                        {
                            <label style="margin-right: .5em;">You've chosen @game.HomeTeam.TeamName @game.PointSpreadDescription.Substring(0, 5) over @game.AwayTeam.TeamName</label>
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.HomeTeam.TeamName @GetSpreadForHomeTeam(game.PointSpread)
                            </button>
                        }
                        else if (chosenGamesAndWinners.ContainsValue(game.AwayTeam.TeamName))
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread)
                            </button>
                            <label style="margin-left: .5em;">You've chosen @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread) over @game.HomeTeam.TeamName</label>
                        }
                        else
                        {
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.AwayTeam.TeamName))">
                                Choose @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread)
                            </button>
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.HomeTeam.TeamName))">
                                Choose @game.HomeTeam.TeamName @GetSpreadForHomeTeam(game.PointSpread)
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="parley-game-item-chosen" >
                        <div class="parley-game-title">
                            <div class="parley-helmet-icon-away">
                                <img style="height:80px;" src="/images/@game.AwayTeam.ImagePath" alt="team logo">
                            </div>
                            <div style="margin-top: 1em;">
                                <h3 style="font-weight:700">@game.AwayTeam.TeamName At @game.HomeTeam.TeamName @game.PointSpreadDescription</h3>
                                <h3 style="font-size:20px;font-weight:700;">@game.DateOfGameOnly at @game.TimeOfGameOnly pm</h3>
                            </div>
                            <div class="parley-helmet-icon-home">
                                <img style="height:80px;" src="/images/@game.HomeTeam.ImagePath" alt="team logo">
                            </div>
                        </div>
                        @if(chosenGamesAndWinners.ContainsValue(game.HomeTeam.TeamName))
                        {
                            <label style="margin-right: .5em;">You've chosen @game.HomeTeam.TeamName @game.PointSpreadDescription.Substring(0, 5) over @game.AwayTeam.TeamName</label>
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.HomeTeam.TeamName @GetSpreadForHomeTeam(game.PointSpread)
                            </button>
                        }
                        else if (chosenGamesAndWinners.ContainsValue(game.AwayTeam.TeamName))
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread)
                            </button>
                            <label style="margin-left: .5em;">You've chosen @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread) over @game.HomeTeam.TeamName</label>
                        }
                        else
                        {
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.AwayTeam.TeamName))">
                                Choose @game.AwayTeam.TeamName @GetSpreadForAwayTeam(game.PointSpread)
                            </button>
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.HomeTeam.TeamName))">
                                Choose @game.HomeTeam.TeamName @GetSpreadForHomeTeam(game.PointSpread)
                            </button>
                        }
                    </div>
                }

        }
            <div class="bet-details">
                @if(betAmountBad)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">YOU CANNOT SUBMIT A WAGER WITH A BET AMOUNT OF ZERO</div>
                }
                @if(betCountBad)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">YOU MUST PICK AT LEAST 2 GAMES AND NO MORE THAN 5 FOR A PARLEY</div>
                }
                <div class="wager-box">
                    <label style="text-align: center;margin: .5em auto;">Wager Amount</label>
                    <input type="number" @bind-value="@betAmount" @bind-value:event="oninput"/>
                 </div>  
                 <div style="text-align:center;margin-top:1em;">
                     <p style="margin: .5em auto;">Your @chosenGamesAndWinners.Count game parley for $@betAmount is ready.</p>
                    <p style="margin: .5em auto;">If everything looks good click "Submit Wager"</p>
                 </div>
                <div style="text-align:center; margin-top:2em;margin-bottom: 2em;" class="undo-btn-container">
                    <button class="mb-2 mt-4 site-btn btn site-btn-light btn-sm text-uppercase" 
                        @onclick="SubmitParleyWager">
                        Submit Wager
                    </button>  
                </div>
            </div>
        </div>
        
    }
    else
    {
        <h3 style="text-align:center;margin-top:4em;">Good luck on your new wager! Click "Home" to browse more games or refresh the page to place another parley bet.</h3>
    }
</div>


@code {

    // Current logged in user
    private UserModel? loggedInUser;

    // List of available games
    private List<GameModel> gamesAvailable = new();

    // List of available games
    private List<GameModel> gamesChosen = new();

    // Dictionary with basic games chosen for keys and chosen winner team names for values
    private Dictionary<GameModel, string> chosenGamesAndWinners = new();

    // IEnumerable of all games
    private IEnumerable<GameModel>? games;

    // IEnumerable of all teams
    private IEnumerable<TeamModel>? teams;

    // Amount being wagered on parley bet
    private decimal betAmount;

    // Bool to check if wager has been submitted
    private bool wagerSubmitted = false;

    // Bool to check if bet amount is greater than zero
    private bool betAmountBad = false;

    // Bool to check if bet count is less than 6
    private bool betCountBad = false;

    private bool gameNotStarted = true;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        loggedInUser.AccountBalance = 
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));

        games = await gameData.GetGames();

        teams = await teamData.GetTeams();

        gamesAvailable = 
            games.Where(g => g.GameStatus == GameStatus.NOT_STARTED).ToList();

        gamesAvailable = gamesAvailable.PopulateGameModelsWithTeams(teams);

    }

    /// <summary>
    /// Async method processes the parley bet and inserts it into the database
    /// </summary>
    /// <returns></returns>
    private async Task SubmitParleyWager()
    {
        if (chosenGamesAndWinners.Count <= 5 && chosenGamesAndWinners.Count > 1)
        {
            if (betAmount > 0)
            {
                ParleyBetModel parleyBet = new();

                foreach (KeyValuePair<GameModel, string> kv in chosenGamesAndWinners)
                {
                    bool hasStarted;

                    GameLookup? gameLookup = 
                        await gameService.GetGameByScoreIdLookup(kv.Key.ScoreId);

                    if(gameLookup is not null)
                    {
                        hasStarted = gameLookup.Score.HasStarted;

                        if (hasStarted == false)
                        {
                            TeamModel? chosenWinner =
                                teams?.Where(t => t.TeamName == kv.Value).FirstOrDefault();

                            BetModel bet = new();

                            if (chosenWinner is not null)
                            {
                                bet.BetAmount = 0;
                                bet.BetPayout = 0;
                                bet.BettorId = loggedInUser!.Id;
                                bet.GameId = kv.Key.Id;
                                bet.ChosenWinnerId = chosenWinner.Id;
                                bet.PayoutStatus = PayoutStatus.PARLEY;

                                int betId = await betData.InsertBet(bet);

                                bet.Id = betId;

                                parleyBet.Bets.Add(bet);
                            }
                        }

                        else
                            gameNotStarted = false;
                    }
                }

                parleyBet.BetAmount = betAmount;
                parleyBet.BetPayout = 
                    parleyBet.Bets.Count.CalculateParleyBetPayout(betAmount);
                parleyBet.BettorId = loggedInUser!.Id;

                HouseAccountModel? houseAccount = await houseData.GetHouseAccount();

                loggedInUser.AccountBalance -= betAmount;
                houseAccount!.AccountBalance += betAmount;

                await loggedInUser.CreateParleyBetTransaction(
                    parleyBet, houseAccount, config, userData, houseData, 
                        parleyData);

                wagerSubmitted = true;
            }

            else
                betAmountBad = true;
        }

        else
            betCountBad = true;
    }

    /// <summary>
    /// Method unselects the winner of game
    /// </summary>
    /// <param name="game">GameModel represents game the winner is being chosen for</param>
    private void UndoWinnerSelection(GameModel game)
    {
        if(chosenGamesAndWinners.ContainsKey(game))
            chosenGamesAndWinners.Remove(game);
    }

    /// <summary>
    /// Method chooses winner of game
    /// </summary>
    /// <param name="game">GameModel represents the game the winner is being chosen for</param>
    /// <param name="chosenTeamName">string represents team name of chosen winner</param>
    private void ChooseWinnerForGame(GameModel game, string chosenTeamName)
    {
        if (chosenGamesAndWinners.Count < 5 && !chosenGamesAndWinners.ContainsKey(game))
            chosenGamesAndWinners.Add(game, chosenTeamName);
        if (chosenGamesAndWinners.Count >= 2 && betCountBad)
            betCountBad = false;
    }

    /// <summary>
    /// Method selects basic game for parley bet
    /// </summary>
    /// <param name="game">GameModel represents game being selected for parley bet</param>
    private void SelectGame(GameModel game)
    {
        if(gamesChosen.Count < 5 && !gamesChosen.Contains(game) 
            && gamesAvailable.Contains(game))
        {
            gamesChosen.Add(game);
            gamesAvailable.Remove(game);
        }
    }

    /// <summary>
    /// Method unselects a basic game from parley bet
    /// </summary>
    /// <param name="game">
    /// GameModel represents the game being removed from
    /// parley bet
    /// </param>
    private void UnselectGame(GameModel game)
    {
        if(gamesChosen.Contains(game) && !gamesAvailable.Contains(game))
        {
            gamesAvailable.Add(game);
            gamesChosen.Remove(game);
        }
    }

    private string GetSpreadForAwayTeam(double pointSpread)
    {
        if (pointSpread < 0)
            return $"+ {pointSpread * -1}";
        else if (pointSpread == 0)
            return "+ 0";
        else
            return $"- {pointSpread}";
    }

    private string GetSpreadForHomeTeam(double pointSpread)
    {
        if (pointSpread < 0)
            return $"- {pointSpread.ToString().Trim('-')}";
        else if (pointSpread == 0)
            return "+ 0";
        else
            return $"+ {pointSpread}";
    }

    private string GetGameItemClass(GameModel game)
    {
        return chosenGamesAndWinners.ContainsKey(game) ? 
            "parley-game-item-chosen" : "parley-game-item-unchosen";
    }

    private string GetStatusClass(GameModel game)
     {
         if (chosenGamesAndWinners is null || chosenGamesAndWinners.Count < 1)
         {
             return "parley-game-item-unchosen";
         }

         string output = chosenGamesAndWinners.ContainsKey(game) switch
         {
             true => "parley-game-item-chosen",
             false => "parley-game-item-unchosen",
         };
         return output;
     }
}
