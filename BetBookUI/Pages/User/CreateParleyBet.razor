@page "/CreateParleyBet"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IBetData betData
@inject IGameData gameData
@inject ITeamData teamData
@inject IHouseAccountData houseData
@inject IParleyBetData parleyData
@inject IConfiguration config
@inject IGameService gameService

<PageTitle>CREATE A PARLEY BET</PageTitle>

@if(wagerPlaced == false)
{
    <div class="info-label-container">
        @if (chosenGamesAndWinners.Count < 5)
        {
           <h6 style="text-align:center; font-weight:700;">CREATE A PARLEY BET BY CHOOSING A WINNER FOR UP TO 5 GAMES</h6>
        }
        else
        {
            <h6 style="color:red;text-align:center;margin-top:1.5em;font-size:20px;font-weight:700;margin-left:13.5em;">* GAME LIMIT *</h6>
        }
    </div>
    <div class="parley-bet-game-list-section">
        <div style="width:100%;">
            @foreach(GameModel game in gamesAvailable)
            {
                @if (!chosenGamesAndWinners.ContainsKey(game))
                {
                    <div class="parley-game-item-unchosen" >
                        <div class="parley-game-title">
                            <div class="parley-helmet-icon-away">
                                <img style="height:80px;" src="/images/@game.AwayTeam.ImagePath" alt="team logo">
                            </div>
                            <div class="game-description">
                                <h6 style="font-size:18px;font-weight:700">@game.AwayTeam.TeamName At @game.HomeTeam.TeamName @game.PointSpreadDescription</h6>
                                <h6 style="font-weight:700;">@game.DateOfGameOnly at @game.TimeOfGameOnly pm</h6>
                            </div>
                            <div class="at">
                                <h6 class="at-symbol">@@</h6>
                            </div>
                            <div class="parley-helmet-icon-home">
                                <img style="height:80px;" src="/images/@game.HomeTeam.ImagePath" alt="team logo">
                            </div>
                        </div>
                        @if(chosenGamesAndWinners.ContainsValue(game.HomeTeam.TeamName))
                        {
                            <label style="margin-right: .5em;font-size:18px;">You've chosen @game.HomeTeam.TeamName @game.PointSpreadDescription.Substring(0, 5) over @game.AwayTeam.TeamName</label>
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.HomeTeam.TeamName @GetSpread(game, game.HomeTeam.TeamName)
                            </button>
                        }
                        else if (chosenGamesAndWinners.ContainsValue(game.AwayTeam.TeamName))
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName)
                            </button>
                            <label style="margin-left: .5em;font-size:18px;">You've chosen @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName) over @game.HomeTeam.TeamName</label>
                        }
                        else
                        {
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.AwayTeam.TeamName))">
                                Choose @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName)
                            </button>
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.HomeTeam.TeamName))">
                                Choose @game.HomeTeam.TeamName @GetSpread(game, game.HomeTeam.TeamName)
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="parley-game-item-chosen" >
                        <div class="parley-game-title">
                            <div class="parley-helmet-icon-away">
                                <img style="height:80px;" src="/images/@game.AwayTeam.ImagePath" alt="team logo">
                            </div>
                            <div class="game-description">
                                <h6 style="font-size:18px; font-weight:700">@game.AwayTeam.TeamName At @game.HomeTeam.TeamName @game.PointSpreadDescription</h6>
                                <h6 style="font-weight:700;">@game.DateOfGameOnly at @game.TimeOfGameOnly pm</h6>
                            </div>
                            <div class="at">
                                <h6 class="at-symbol">@@</h6>
                            </div>
                            <div class="parley-helmet-icon-home">
                                <img style="height:80px;" src="/images/@game.HomeTeam.ImagePath" alt="team logo">
                            </div>
                        </div>
                        @if(chosenGamesAndWinners.ContainsValue(game.HomeTeam.TeamName))
                        {
                            <label style="margin-right: .5em;font-size:18px;">You've chosen @game.HomeTeam.TeamName @game.PointSpreadDescription.Substring(0, 5) over @game.AwayTeam.TeamName</label>
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.HomeTeam.TeamName @GetSpread(game, game.HomeTeam.TeamName)
                            </button>
                        }
                        else if (chosenGamesAndWinners.ContainsValue(game.AwayTeam.TeamName))
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="() => UndoWinnerSelection(game)">
                                Undo @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName)
                            </button>
                            <label style="margin-left: .5em;font-size:18px;">You've chosen @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName) over @game.HomeTeam.TeamName</label>
                        }
                        else
                        {
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.AwayTeam.TeamName))">
                                Choose @game.AwayTeam.TeamName @GetSpread(game, game.AwayTeam.TeamName)
                            </button>
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinnerForGame(game, game.HomeTeam.TeamName))">
                                Choose @game.HomeTeam.TeamName @GetSpread(game, game.HomeTeam.TeamName)
                            </button>
                        }
                    </div>
                }

            }
            <div class="parley-game-item-unchosen">
                @if(betAmountBad)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">YOU CANNOT SUBMIT A WAGER WITH A BET AMOUNT OF ZERO</div>
                }
                @if(betCountBad)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">YOU MUST PICK AT LEAST 2 GAMES AND NO MORE THAN 5 FOR A PARLEY</div>
                }
                @if(gameNotStarted == false)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">ONE OF THE GAMES YOU'VE CHOSEN HAS ALREADY STARTED..TRY AGAIN</div>
                }
                <div class="wager-box">
                    <label style="text-align: center;margin: .5em auto;">Wager Amount</label>
                    <input type="number" @bind-value="@betAmount" @bind-value:event="oninput"/>
                    </div>  
                    <div style="text-align:center;margin-top:1em;">
                        <p style="margin: .5em auto;">Your @chosenGamesAndWinners.Count game parley for $@betAmount is ready.</p>
                    <p style="margin: .5em auto;">If everything looks good click "Submit Wager"</p>
                    </div>
                <div style="text-align:center; margin-top:2em;margin-bottom: 2em;" class="undo-btn-container">
                    <button class="mb-2 mt-4 site-btn btn site-btn-light btn-sm text-uppercase" 
                        @onclick="SubmitParleyWager">
                        Submit Wager
                    </button>  
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="parley-game-item-unchosen">
        <h3 style="text-align:center;margin-top:4em;margin-bottom:4em;">Good luck!</h3>
    </div>
}

@code {

    // List of available games
    private List<GameModel> gamesAvailable = new();

    // List of available games
    private List<GameModel> gamesChosen = new();

    // Dictionary with basic games chosen for keys and chosen winner team names for values
    private Dictionary<GameModel, string> chosenGamesAndWinners = new();

    // IEnumerable of all games
    private IEnumerable<GameModel>? games;

    // IEnumerable of all teams
    private IEnumerable<TeamModel>? teams;

    // Amount being wagered on parley bet
    private decimal betAmount;

    // Bool to check if wager has been submitted
    private bool wagerPlaced = false;

    // Bool to check if bet amount is greater than zero
    private bool betAmountBad = false;

    // Bool to check if bet count is less than 6
    private bool betCountBad = false;

    private bool gameNotStarted = true;


    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        games = await gameData.GetGames();

        teams = await teamData.GetTeams();

        gamesAvailable = 
            games.Where(g => g.GameStatus == GameStatus.NOT_STARTED).ToList();

        gamesAvailable = gamesAvailable.PopulateGameModelsWithTeams(teams);
    }

    /// <summary>
    /// Async method processes the parley bet and inserts it into the database
    /// </summary>
    /// <returns></returns>
    private async Task SubmitParleyWager()
    {
        if (chosenGamesAndWinners.Count < 2)
        {
            betCountBad = true;
            return;
        }

        if (betAmount <= 0)
        {
            betAmountBad = true;
            return;
        }

        UserModel loggedInUser = await authProvider.GetUserFromAuth(userData);

        ParleyBetModel parleyBet = new();

        foreach (KeyValuePair<GameModel, string> kv in chosenGamesAndWinners)
        {
            GameByScoreIdLookup? gameLookup = 
                await gameService.GetGameByScoreIdLookup(kv.Key.ScoreId);

            if (gameLookup is null)
                return;

            if (gameLookup.Score.HasStarted)
            {
                gameNotStarted = false;
                return;
            }

            TeamModel? chosenWinner =
                    teams?.Where(t => t.TeamName == kv.Value).FirstOrDefault();

            BetModel bet = new();

            if (chosenWinner is null)
                return;

            bet.BetAmount = 0;
            bet.BetPayout = 0;
            bet.BettorId = loggedInUser!.Id;
            bet.GameId = kv.Key.Id;
            bet.ChosenWinnerId = chosenWinner.Id;
            bet.PayoutStatus = PayoutStatus.PARLEY;
            bet.Id = await betData.InsertBet(bet);

            parleyBet.Bets.Add(bet);
        }

        parleyBet.BetAmount = betAmount;
        parleyBet.BetPayout = 
            parleyBet.Bets.Count.CalculateParleyBetPayout(betAmount);
        parleyBet.BettorId = loggedInUser!.Id;

        HouseAccountModel? houseAccount = await houseData.GetHouseAccount();

        loggedInUser.AccountBalance -= betAmount;
        houseAccount!.AccountBalance += betAmount;

        await loggedInUser.CreateParleyBetTransaction(
            parleyBet, houseAccount, config, userData, houseData, 
                parleyData);

        wagerPlaced = true;
    }

    /// <summary>
    /// Method unselects the winner of game
    /// </summary>
    /// <param name="game">GameModel represents game the winner is being chosen for</param>
    private void UndoWinnerSelection(GameModel game)
    {
        if(chosenGamesAndWinners.ContainsKey(game))
            chosenGamesAndWinners.Remove(game);
    }

    /// <summary>
    /// Method chooses winner of game
    /// </summary>
    /// <param name="game">GameModel represents the game the winner is being chosen for</param>
    /// <param name="chosenTeamName">string represents team name of chosen winner</param>
    private void ChooseWinnerForGame(GameModel game, string chosenTeamName)
    {
        if (chosenGamesAndWinners.Count < 5 && !chosenGamesAndWinners.ContainsKey(game))
            chosenGamesAndWinners.Add(game, chosenTeamName);
        if (chosenGamesAndWinners.Count >= 2 && betCountBad)
            betCountBad = false;
    }

    /// <summary>
    /// Method selects basic game for parley bet
    /// </summary>
    /// <param name="game">GameModel represents game being selected for parley bet</param>
    private void SelectGame(GameModel game)
    {
        if(gamesChosen.Count < 5 && !gamesChosen.Contains(game) 
            && gamesAvailable.Contains(game))
        {
            gamesChosen.Add(game);
            gamesAvailable.Remove(game);
        }
    }

    /// <summary>
    /// Method unselects a basic game from parley bet
    /// </summary>
    /// <param name="game">
    /// GameModel represents the game being removed from
    /// parley bet
    /// </param>
    private void UnselectGame(GameModel game)
    {
        if(gamesChosen.Contains(game) && !gamesAvailable.Contains(game))
        {
            gamesAvailable.Add(game);
            gamesChosen.Remove(game);
        }
    }

    private string GetSpread(GameModel currentGame, string teamName)
    {
        if(teamName == currentGame.AwayTeam.TeamName)
        {
            return (currentGame.PointSpread < 0) ? $"+ {currentGame.PointSpread * -1}" 
                : (currentGame.PointSpread == 0) ? $"+ 0" 
                : $"- {currentGame.PointSpread}";
        }


        return (currentGame.PointSpread < 0) ? $"- {currentGame.PointSpread.ToString().Trim('-')}" 
            : (currentGame.PointSpread == 0) ? $"+ 0" 
            : $"+ {currentGame.PointSpread}";
    }
}
