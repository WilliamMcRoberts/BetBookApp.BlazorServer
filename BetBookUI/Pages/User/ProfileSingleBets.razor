@page "/ProfileSingleBets"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject ILogger<ProfileSingleBets> logger
@inject MediatR.IMediator _mediator


<PageTitle>SINGLE BETS</PageTitle>



<div class="user-profile-reg">

    <div>
        <div class="label-container">
            <h3 style="font-weight: 700">@loggedInUser?.DisplayName's Single Bets</h3>
        </div>
        <div class="item">
            <p>Pending Payout: $@totalPendingPayout.ToString("#,##0.00")</p>
        </div>
        <div class="item">
            <p>Pending Refund: $@totalPendingRefund.ToString("#,##0.00")</p>
        </div>
        <div style="text-align: center;margin-bottom: 1em;margin-top: 1em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidWinningBets">Collect My Winnings</button>
        </div>
        <div style="text-align: center;margin-bottom: 2em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="RefundUnpaidPushBets">Refund My Push Bets</button>
        </div>
    </div>


    <div class="bets">

        <RegBetList BetType="Open"
                    BetList="bettorInProgressBets"/>

        <RegBetList BetType="Winning"
                    BetList="bettorWinningBetsUnpaid"/>

        <RegBetList BetType="Push"
                    BetList="bettorPushBetsUnpaid"/>
    </div>

</div>

<SfToast @ref="ToastObjPayout" Timeout="0" ShowCloseButton="true" Title="Your Winnings Have Been Deposited Into Your Account!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<SfToast @ref="ToastObjRefund" Timeout="0" ShowCloseButton="true" Title="Your Push Bets Have Been Refunded!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>


<style>

    /*Toast Background*/
    .e-toast-container .e-toast { 
        /*Black w/opacity*/
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
        
        /*Toast Background Hover*/
        .e-toast-container .e-toast:hover { 
            /*Black w/opacity*/
            background-color: rgba(0,0,0, .9);
        }

        /*Toast Title*/
        .e-toast-container .e-toast .e-toast-message .e-toast-title { 
            color: white;
            font-weight: 700;
        }

        /*Toast Content*/
        .e-toast-container .e-toast .e-toast-message .e-toast-content { 
            color: white;
            font-weight: 700;
        }

</style>

@code {
    SfToast? ToastObjPayout;
    SfToast? ToastObjRefund;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    public string Content { get => "Refresh the page to see your new balance."; }
    private UserModel? loggedInUser;
    private List<BetModel> bettorInProgressBets = new();
    private List<BetModel> bettorWinningBetsUnpaid = new();
    private List<BetModel> bettorPushBetsUnpaid = new();
    private List<BetModel> bettorBetsUnpaid = new();
    private decimal totalPendingPayout;
    private decimal totalPendingRefund;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Profile Single Bets Page Requested");

        loggedInUser = await _mediator.GetUserFromAuth(authProvider);

        bettorBetsUnpaid = 
            (List<BetModel>)await _mediator.Send(
                new GetBettorBetsUnpaidQuery(loggedInUser.Id));

        bettorInProgressBets = bettorBetsUnpaid.Where(
            b => b.BetStatus == BetStatus.IN_PROGRESS).ToList();

        bettorWinningBetsUnpaid = bettorBetsUnpaid.Where(
            b => b.BetStatus == BetStatus.WINNER 
            && b.PayoutStatus == PayoutStatus.UNPAID).ToList();

        bettorPushBetsUnpaid = bettorBetsUnpaid.Where(
            b => b.BetStatus == BetStatus.PUSH && b.PayoutStatus == PayoutStatus.UNPAID)
            .ToList();

        totalPendingPayout = 
            bettorWinningBetsUnpaid.CalculateTotalPendingPayout();

        totalPendingRefund = 
            bettorPushBetsUnpaid.CalculateTotalPendingRefund();
    }

    private async Task PayoutUnpaidWinningBets()
    {
        if (loggedInUser is null)
            return;

        bool transactionGood =
            await _mediator.Send(
                new UpdateAndPayoutUnpaidWinningBetsByBettorCommand(
                    totalPendingPayout, loggedInUser.Id));

        if (transactionGood)
            await this.ToastObjPayout!.ShowAsync();

        bettorWinningBetsUnpaid.Clear();

        totalPendingPayout = 0;
    }

    private async Task RefundUnpaidPushBets()
    {
        if (loggedInUser is null)
            return;

        bool transactionGood = 
            await _mediator.Send(
                new UpdateAndPayoutUnpaidPushBetsByBettorCommand(
                    totalPendingRefund, loggedInUser.Id));

        if (transactionGood)
            await this.ToastObjRefund!.ShowAsync();

        bettorPushBetsUnpaid.Clear();

        totalPendingRefund = 0;
    }
}