@page "/ProfileSingleBets"
@attribute [Authorize]
@inject IUserData userData
@inject AuthenticationStateProvider authProvider
@inject ITeamData teamData
@inject IGameData gameData
@inject IBetData betData
@inject IParleyBetData parleyData
@inject IHouseAccountData houseData
@inject IConfiguration config
@inject ITransactionService transactionService
@inject ILogger<ProfileSingleBets> logger

<PageTitle>SINGLE BETS</PageTitle>



<div class="user-profile-reg">

    <div>
        <div class="label-container">
            <h3 style="font-weight: 700">@loggedInUser?.DisplayName's Single Bets</h3>
        </div>
        <div class="item">
            <p>Pending Payout: $@Convert.ToDecimal(totalPendingPayout).ToString("#,##0.00")</p>
        </div>
        <div class="item">
            <p>Pending Refund: $@Convert.ToDecimal(totalPendingRefund).ToString("#,##0.00")</p>
        </div>
        <div style="text-align: center;margin-bottom: 1em;margin-top: 1em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidWinningBets">Collect My Winnings</button>
        </div>
        <div style="text-align: center;margin-bottom: 2em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="RefundUnpaidPushBets">Refund My Push Bets</button>
        </div>
    </div>


    <div class="bets">

        <RegBetList BetType="Open"
                    BetList="bettorInProgressBets"/>

        <RegBetList BetType="Winning"
                    BetList="bettorWinningBetsUnpaid"/>

        <RegBetList BetType="Push"
                    BetList="bettorPushBetsUnpaid"/>
    </div>

</div>

<SfToast @ref="ToastObjPayout" Timeout="0" ShowCloseButton="true" Title="Your Winnings Have Been Deposited Into Your Account!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<SfToast @ref="ToastObjRefund" Timeout="0" ShowCloseButton="true" Title="Your Push Bets Have Been Refunded!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>


<style>

    /*Toast Background*/
    .e-toast-container .e-toast { 
        /*Black w/opacity*/
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
        
        /*Toast Background Hover*/
        .e-toast-container .e-toast:hover { 
            /*Black w/opacity*/
            background-color: rgba(0,0,0, .9);
        }

        /*Toast Title*/
        .e-toast-container .e-toast .e-toast-message .e-toast-title { 
            color: white;
            font-weight: 700;
        }

        /*Toast Content*/
        .e-toast-container .e-toast .e-toast-message .e-toast-content { 
            color: white;
            font-weight: 700;
        }

</style>

@code {
    SfToast? ToastObjPayout;
    SfToast? ToastObjRefund;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    public string Content { get => "Thank you for choosing Bet Book Gaming."; }
    private UserModel? loggedInUser;
    private IEnumerable<TeamModel>? teams;
    private IEnumerable<GameModel>? games;
    private IEnumerable<BetModel>? bets;
    private List<BetModel> bettorInProgressBets = new();
    private List<BetModel> bettorWinningBetsUnpaid = new();
    private List<BetModel> bettorPushBetsUnpaid = new();
    private decimal totalPendingPayout;
    private decimal totalPendingRefund;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Profile Single Bets Page Requested");

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        games = await gameData.GetGames();
        teams = await teamData.GetTeams();
        bets = await betData.GetBets();

        bettorInProgressBets = bets.Where(
            b => b.BettorId == loggedInUser.Id 
            && b.BetStatus == BetStatus.IN_PROGRESS).ToList();
                
        if (bettorInProgressBets.Count != 0)
            bettorInProgressBets = 
                bettorInProgressBets.PopulateBetModelsWithGamesAndTeams(games, teams);

        bettorWinningBetsUnpaid = bets.Where(
            b => b.BettorId == loggedInUser.Id 
            && b.BetStatus == BetStatus.WINNER 
            && b.PayoutStatus == PayoutStatus.UNPAID).ToList();

        if (bettorWinningBetsUnpaid.Count != 0)
            bettorWinningBetsUnpaid = 
                bettorWinningBetsUnpaid.PopulateBetModelsWithGamesAndTeams(games, teams);

        bettorPushBetsUnpaid = bets.Where(
            b => b.BettorId == loggedInUser.Id 
            && b.BetStatus == BetStatus.PUSH &&b.PayoutStatus == PayoutStatus.UNPAID)
            .ToList();

        if (bettorPushBetsUnpaid.Count != 0)
            bettorPushBetsUnpaid = 
                bettorPushBetsUnpaid.PopulateBetModelsWithGamesAndTeams(games, teams);

        totalPendingPayout = 
            bettorWinningBetsUnpaid.CalculateTotalPendingPayout();

        totalPendingRefund = 
            bettorPushBetsUnpaid.CalculateTotalPendingRefund();
    }

    private async Task PayoutUnpaidWinningBets()
    {
        HouseAccountModel? houseAccount = await houseData.GetHouseAccount();

        if (houseAccount is null || loggedInUser is null)
            return;

        bool transactionGood = await transactionService.PayoutBetsTransaction(
            loggedInUser, bettorWinningBetsUnpaid, totalPendingPayout);

        if (transactionGood)
            await this.ToastObjPayout!.ShowAsync();

        bettorWinningBetsUnpaid.Clear();

        totalPendingRefund = 0;
    }

    private async Task RefundUnpaidPushBets()
    {
        HouseAccountModel? houseAccount = await houseData.GetHouseAccount();

        if (houseAccount is null || loggedInUser is null)
            return;

        bool transactionGood = await transactionService.PayoutBetsTransaction(
            loggedInUser, bettorPushBetsUnpaid, totalPendingRefund);

        if (transactionGood)
            await this.ToastObjRefund!.ShowAsync();

        bettorPushBetsUnpaid.Clear();

        totalPendingRefund = 0;
    }
}