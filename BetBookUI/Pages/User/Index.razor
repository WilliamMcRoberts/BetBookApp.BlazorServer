@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject IGameService gameService

<PageTitle>HOME</PageTitle>

<div>
    <h6 class="text-uppercase" style="font-size:25px;text-align:center; font-weight:700;">@nextWeekSeason Season Week @nextWeek</h6>
</div>
    

<div class="games">

    <GameDisplay AvailableGameList="gamesAvailable" 
                    User="loggedInUser"
                    Teams="teams"/>

</div>



@code {

        // Current logged in user
        UserModel? loggedInUser;

        // Current week of season
        int lastWeek;

        int nextWeek;

        // Current season type
        SeasonType currentSeason;

        SeasonType nextWeekSeason;

        List<GameModel> gamesAvailable = new();

        IEnumerable<TeamModel>? teams;

        IEnumerable<GameModel>? games;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        teams = await teamData.GetTeams();
        games = await gameData.GetGames();

        lastWeek = games.Select(g => g.WeekNumber).LastOrDefault();

        gamesAvailable = games.Where(g => 
            g.GameStatus == GameStatus.NOT_STARTED).ToList();

        currentSeason = DateTime.Now.CalculateSeason();

        (nextWeek, nextWeekSeason) = 
            (lastWeek, currentSeason).CalculateNextWeekAndSeasonFromCurrentWeekAndSeason();

        if (gamesAvailable.Count < 1)
        {
            gamesAvailable = 
                await gameService.GetGamesForNextWeek(currentSeason, lastWeek);
        }

        gamesAvailable = gamesAvailable.PopulateGameModelsWithTeams(teams);

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        await authProvider.LoadAndVerifyUser(loggedInUser, userData);
    }
}
