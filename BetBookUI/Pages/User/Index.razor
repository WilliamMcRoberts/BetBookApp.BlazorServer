@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject IGameService gameService

<PageTitle>Index</PageTitle>

@******************************  Demo Display  ********************************@

<div class="games-page">

    <div class="week-title">

        @if(gamesAvailable is not null && gamesAvailable.Count != 1)
        {
            <h1 style="margin-left: 8em;">@gamesAvailable.Count Available Games</h1>
        }
        else if(gamesAvailable is not null)
        {
            <h1 style="margin-left: 8em;">@gamesAvailable.Count Available Game</h1>
        }
        <h1 style="margin-right: 8em;">@currentSeason Season Week @nextWeek</h1>

    </div>

    <div class="games">

        <GameDisplay AvailableGameList="gamesAvailable" 
                     User="loggedInUser"
                     Teams="teams"/>

    </div>
</div>


@code {

    // Current logged in user
    UserModel? loggedInUser;

    // Current week of season
    int currentWeek;

    int nextWeek;

    // Current season type
    SeasonType currentSeason;

    List<GameModel> gamesAvailable = new();

    IEnumerable<TeamModel>? teams;

    IEnumerable<GameModel>? games;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        teams = await teamData.GetTeams();
        games = await gameData.GetGames();

        gamesAvailable = games.Where(g => 
            g.GameStatus == GameStatus.NOT_STARTED).ToList();

        currentSeason = DateTime.Now.CalculateSeason();
        currentWeek = currentSeason.CalculateWeek(DateTime.Now);
        nextWeek = currentWeek + 1;

        if (gamesAvailable.Count < 1)
        {
            gamesAvailable = 
                await gameService.GetGamesForNextWeek(currentSeason, currentWeek, teams);
        }

        gamesAvailable = gamesAvailable.PopulateGameModelsWithTeams(teams);

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        await authProvider.LoadAndVerifyUser(loggedInUser, userData);
    }
}
