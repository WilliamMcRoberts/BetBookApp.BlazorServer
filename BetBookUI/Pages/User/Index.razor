@page "/"
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject IGameService gameService

<PageTitle>HOME</PageTitle>

<div>
    <h6 class="text-uppercase" style="font-size:25px;text-align:center; font-weight:700;">@season Season Week @week</h6>
</div>
    

<div class="games">

    <GameDisplay AvailableGameList="gamesAvailable" 
                    User="loggedInUser"
                    Teams="teams"/>

</div>

@code {

    UserModel loggedInUser;
    SeasonType season;
    int week;
    HashSet<GameModel> gamesAvailable = new();
    IEnumerable<TeamModel>? teams;
    IEnumerable<GameModel>? games;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);

        if(teams is null)
            teams = await teamData.GetTeams();
        if(games is null)
            games = await gameData.GetGames();

        HashSet<GameModel> thisWeeksGames = 
            games.Where(g => g.WeekNumber == week).ToHashSet<GameModel>();

        if(thisWeeksGames.Count != 16)
        {
            thisWeeksGames = await gameService.GetGamesForThisWeek(season, week);
        }

        gamesAvailable = thisWeeksGames.Where(g => 
            g.GameStatus == GameStatus.NOT_STARTED).ToHashSet<GameModel>();

        gamesAvailable = gamesAvailable.PopulateGameModelsWithTeams(teams);

        await authProvider.LoadAndVerifyUser(loggedInUser, userData);

        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }
}
