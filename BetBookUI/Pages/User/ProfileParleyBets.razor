@page "/ProfileParleyBets"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IConfiguration config
@inject ITransactionService transactionService
@inject ILogger<ProfileParleyBets> logger
@inject MediatR.IMediator _mediator

<PageTitle>PARLEY BETS</PageTitle>

<div class="user-profile-parley">

    <div>

        <div class="label-container">
            <h3 style="font-weight: 700">@loggedInUser?.DisplayName's Parley Bets</h3>
        </div>
        <div class="item">
        <p>Pending Payout: $@totalPendingParleyPayout.ToString("#,##0.00")</p>
        </div>
        <div class="item">
            <p>Pending Refund: $@totalPendingParleyRefund.ToString("#,##0.00")</p>
        </div>
        <div style="text-align: center;margin-bottom: 1em;margin-top: 1em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidWinningParleyBets">Collect My Winnings</button>
        </div>
        <div style="text-align: center;margin-bottom: 2em;">
            <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidPushParleyBets">Refund My Push Bets</button>
        </div>

    </div>

    <ParleyBetList BetType="Open"
                    BetList="bettorInProgressParleyBets" />

    <ParleyBetList BetType="Winning"
                    BetList="bettorWinningParleyBetsUnpaid" />

    <ParleyBetList BetType="Push"
                    BetList="bettorPushParleyBetsUnpaid" />
</div>
 
<SfToast @ref="ToastObjPayout" Timeout="0" ShowCloseButton="true" Title="Your Winnings Have Been Deposited Into Your Account!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<SfToast @ref="ToastObjRefund" Timeout="0" ShowCloseButton="true" Title="Your Push Parley Bets Have Been Refunded!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<style>

    /*Toast Background*/
    .e-toast-container .e-toast { 
        /*Black w/opacity*/
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
        
        /*Toast Background*/
        .e-toast-container .e-toast:hover { 
            /*Black w/opacity*/
            background-color: rgba(0,0,0, .9);
        }

        /*Toast Title*/
        .e-toast-container .e-toast .e-toast-message .e-toast-title { 
            color: white;
            font-weight: 700;
        }

        /*Toast Content*/
        .e-toast-container .e-toast .e-toast-message .e-toast-content { 
            color: white;
            font-weight: 700;
        }

</style>

@code {
    SfToast? ToastObjPayout;
    SfToast? ToastObjRefund;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content { get => "Refresh the page to see your new balance."; }
    private decimal totalPendingParleyPayout;
    private decimal totalPendingParleyRefund;
    private UserModel? loggedInUser;
    private IEnumerable<BetModel>? bets;
    private IEnumerable<ParleyBetModel>? parleyBets;
    private IEnumerable<TeamModel>? teams;
    private IEnumerable<GameModel>? games;
    private List<ParleyBetModel> bettorWinningParleyBetsUnpaid = new();
    private List<ParleyBetModel> bettorPushParleyBetsUnpaid = new();
    private List<ParleyBetModel> bettorInProgressParleyBets = new();

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("Profile Parley Bets Page Requested");

        loggedInUser = await authProvider.GetUserFromAuth(_mediator);

        games = await _mediator.Send(new GetGamesQuery());
        teams = await _mediator.Send(new GetTeamsQuery());
        bets = await _mediator.Send(new GetBetsQuery());
        parleyBets = await _mediator.Send(new GetParleyBetsQuery());

        bettorInProgressParleyBets = parleyBets.Where(b =>
                b.BettorId == loggedInUser.Id &&
                b.ParleyBetStatus == ParleyBetStatus.IN_PROGRESS).ToList();

        if(bettorInProgressParleyBets.Count != 0)
            bettorInProgressParleyBets = 
                bettorInProgressParleyBets.PopulateParleyBetsWithBetsWithGamesAndTeams(games, teams, bets);

        bettorWinningParleyBetsUnpaid = parleyBets.Where(pb => 
                pb.BettorId == loggedInUser.Id &&
                pb.ParleyBetStatus == ParleyBetStatus.WINNER && 
                pb.ParleyPayoutStatus == ParleyPayoutStatus.UNPAID).ToList();

        if(bettorWinningParleyBetsUnpaid.Count != 0)
            bettorWinningParleyBetsUnpaid = 
                bettorWinningParleyBetsUnpaid.PopulateParleyBetsWithBetsWithGamesAndTeams(games, teams, bets);

        bettorPushParleyBetsUnpaid = parleyBets.Where(b => 
                b.BettorId == loggedInUser.Id &&
                b.ParleyBetStatus == ParleyBetStatus.PUSH && 
                b.ParleyPayoutStatus == ParleyPayoutStatus.UNPAID).ToList();

        if(bettorPushParleyBetsUnpaid.Count != 0)
            bettorPushParleyBetsUnpaid = 
                bettorPushParleyBetsUnpaid.PopulateParleyBetsWithBetsWithGamesAndTeams(games, teams, bets);

        // Total payout of all unpaid winning parley bets
        totalPendingParleyPayout =
            bettorWinningParleyBetsUnpaid.CalculateTotalPendingParleyPayout();


        // Total retfund of all unpaid parley push bets
        totalPendingParleyRefund = 
            bettorPushParleyBetsUnpaid.CalculateTotalPendingParleyRefund();
    }

    private async Task PayoutUnpaidWinningParleyBets()
    {
        HouseAccountModel? houseAccount = await _mediator.Send(new GetHouseAccountQuery());

        if (loggedInUser is null || houseAccount is null)
            return;

        bool transactionGood = await transactionService.PayoutParleyBetsTransaction(
            loggedInUser, bettorWinningParleyBetsUnpaid, totalPendingParleyPayout);

        if (transactionGood)
            await this.ToastObjPayout!.ShowAsync();

        bettorWinningParleyBetsUnpaid.Clear();

        totalPendingParleyPayout = 0;
    }

    private async Task PayoutUnpaidPushParleyBets()
    {
        HouseAccountModel? houseAccount = await _mediator.Send(new GetHouseAccountQuery());

        if (loggedInUser is null || houseAccount is null)
            return;

        bool transactionGood = await transactionService.PayoutParleyBetsTransaction(
            loggedInUser, bettorPushParleyBetsUnpaid, totalPendingParleyRefund);

        if (transactionGood)
            await this.ToastObjRefund!.ShowAsync();

        bettorPushParleyBetsUnpaid.Clear();

        totalPendingParleyRefund = 0;
    }
}
