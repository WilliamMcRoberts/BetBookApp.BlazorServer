@page "/AdminScoresInput"
@attribute [Authorize(Policy = "Admin")]
@inject IGameData gameData
@inject ITeamData teamData
@inject IBetData betData
@inject IParleyBetData parleyData
@inject IGameService gameService

<PageTitle>AdminScoresInput</PageTitle>
<div style="text-align: center;margin-top:4em;">
    <button @onclick="UpdateAllScores" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase">
        Fetch And Insert Scores
    </button>
</div>



@code {
    public IEnumerable<GameModel>? games;

    public IEnumerable<TeamModel>? teams;

    public IEnumerable<BetModel>? bets;

    public IEnumerable<ParleyBetModel>? parleyBets;

    // Current game being updated
    private GameModel? currentGame  = new();

    // Boolean to check if winners were added
    private bool scoresAdded = false;

    // Boolean to check if current game is null
    private bool noGame = false;

    // Boolean to check if game status is finished
    private bool statusBad = false;

    // Id of game
    private int gameId;

    protected override async Task OnInitializedAsync()
    {
        games = await gameData.GetGames();
        teams = await teamData.GetTeams();
        bets = await betData.GetBets();
        parleyBets = await parleyData.GetParleyBets();
    }

    private async Task UpdateAllScores()
    {

        foreach(GameModel game in games!.Where(g => g.GameStatus != GameStatus.FINISHED))
        {
            GameLookup gameLookup = new();

            gameLookup = await gameService.GetGameByScoreIdLookup(game.ScoreId);

            if (gameLookup.Score.IsOver)
            {
                game.HomeTeamFinalScore = (double)gameLookup.Score.HomeScore;
                game.AwayTeamFinalScore = (double)gameLookup.Score.AwayScore;

                await game.UpdateScores(
                    game.HomeTeamFinalScore, game.AwayTeamFinalScore, teams!, gameData);

                await game.UpdateBetWinners(
                    game.HomeTeamFinalScore, game.AwayTeamFinalScore, betData, games!, teams!, bets!);

                await game.UpdateTeamRecords(
                    game.HomeTeamFinalScore, game.AwayTeamFinalScore, teams!, teamData);
            }
        }

        await parleyData.UpdateParleyBetWinners(
                    parleyBets!, games!, teams!, bets!);
    }
}
