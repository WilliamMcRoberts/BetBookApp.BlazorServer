@page "/AdminGamesInput"
@attribute [Authorize(Policy = "Admin")]
@inject IGameData gameData

<PageTitle>AdminGamesInput</PageTitle>

<div style="text-align:center; margin-right: 720px;" class="balance">
    <label>Admin</label>
</div>

<div class="input">
    <div class="game-input">
        <div class="input-label-container">
            <h3 style="font-weight: 700;margin-left: 1em;margin-top: .5em;" class="title">Game Input</h3>
            @if(teamAlreadyPlaying == false)
            {
                <div style="text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">FILL OUT THE FORM TO CREATE A GAME</div>
            }
            else
            {
                <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">TEAM ENTERED CANNOT BE A TEAM ALREADY PLAYING</div>
            }
        </div>
        <EditForm Model="createGame" OnValidSubmit="InsertGame">
            <DataAnnotationsValidator />
            <ValidationSummary/>
            <div class="input-box">
                <label>Game Stadium</label>
                <SfTextBox  Input="@((args) => createGame.Stadium = args.Value)" @bind-Value="@createGame.Stadium" ></SfTextBox>  
            </div>
            <div class="input-box">
                <label>Date Of Game</label>
                <SfDateTimePicker Min='DateTime.Now' TValue="DateTime"> 
                    <DateTimePickerEvents TValue="DateTime" ValueChange="DateChangeHandler"></DateTimePickerEvents>
                </SfDateTimePicker>
            </div>
            <div class="input-box">
                <label>Home Team Id</label>
                <input type="number" @bind-value="@createGame.HomeTeamId" @bind-value:event="oninput"/>
            </div>
            <div>
                 <button type="submit" style="float:right;margin-right:6em;" class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase">Insert Game</button>
            </div>
            <div class="input-box">
                <label>Away Team Id</label>
                <input type="number" @bind-value="@createGame.AwayTeamId" @bind-value:event="oninput"/>
            </div>
            <div class="input-box">
                <label>Favorite Id</label>
                <input type="number" @bind-value="@createGame.FavoriteId" @bind-value:event="oninput"/>
            </div>
            <div class="input-box">
                <label>Underdog Id</label>
                <input type="number" @bind-value="@createGame.UnderdogId" @bind-value:event="oninput"/>
            </div>
            <div style="margin-bottom: 2em;" class="input-box">
                <label>Point Spread</label>
                <input type="number" @bind-value="@createGame.PointSpread" @bind-value:event="oninput"/>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // Model
    CreateGameDto createGame = new();

    private IEnumerable<GameModel> games;

    private List<GameModel> availableGames = new();

    private bool teamAlreadyPlaying = false;

    protected override async Task OnInitializedAsync()
    {
        games = await gameData.GetGames();

        availableGames = games.Where(g => 
            g.GameStatus == GameStatus.NOT_STARTED).ToList();
    }

    /// <summary>
    /// Async method for admin to insert a game into 
    /// the database
    /// </summary>
    /// <returns></returns>
    private async Task InsertGame()
    {
        teamAlreadyPlaying = false;

        GameModel newGame = new();

        newGame.HomeTeamId = createGame.HomeTeamId;
        newGame.AwayTeamId = createGame.AwayTeamId;
        newGame.FavoriteId = createGame.FavoriteId;
        newGame.UnderdogId = createGame.UnderdogId;
        newGame.Stadium = createGame.Stadium;
        newGame.DateOfGame = createGame.DateOfGame;
        newGame.PointSpread = createGame.PointSpread;

        foreach(GameModel game in availableGames)
        {
            if((newGame.FavoriteId == game.FavoriteId || newGame.FavoriteId == game.UnderdogId) || (newGame.UnderdogId == game.FavoriteId || newGame.UnderdogId == game.UnderdogId)) 
            {
                teamAlreadyPlaying = true;
                return;
            }
        }
        
        if(teamAlreadyPlaying == false)
            await gameData.InsertGame(newGame);

        createGame = new();
    }

    /// <summary>
    /// Method for value change for date of game
    /// </summary>
    /// <param name="args">DateTime representing date of game</param>
    private void DateChangeHandler(ChangedEventArgs<DateTime> args)
    {
        createGame.DateOfGame = args.Value;
        StateHasChanged();
    }
}
