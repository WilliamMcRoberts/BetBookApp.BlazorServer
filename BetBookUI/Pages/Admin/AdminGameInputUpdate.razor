@page "/AdminPage"
@attribute [Authorize(Policy = "Admin")]
@inject IGameData gameData
@inject IGameService gameService

<PageTitle>ADMIN</PageTitle>

<div style="text-align:center; margin-right: 720px;" class="balance">
    <h3 style="margin-left:1em;font-weight:700;">Admin</h3>
</div>

<div class="input">
    <div class="game-input">

        <div class="input-label-container">
            <h3 style="font-weight: 700;margin-left: 1em;margin-top: .5em;" class="title">Manual Game Update</h3>
        </div>

        <div style="display:flex;justify-content:space-evenly;margin-bottom: 2em;">
            <div style="margin-top:2em;text-align:center;">
                <button @onclick="FetchAllScoresForFinishedGames" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase">
                    Fetch Scores
                </button>
            </div>

            <div style="margin-top:2em;text-align:center;">
                <button @onclick="GetPointSpreadUpdateForAvailableGames" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase">
                    Fetch Spreads
                </button>
            </div>
        </div>

        <EditForm Model="ug" OnValidSubmit="UpdateGame">

            <DataAnnotationsValidator />
            <ValidationSummary/>

            <div class="input-box">
                <label>Game Id</label>
                <input type="number" @bind-value="@ug.GameId" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Game Stadium</label>
                <SfTextBox @bind-Value="@ug.Stadium"></SfTextBox>  
            </div>

            <div class="input-box">
                <label>Date Of Game</label>
                <SfDateTimePicker Min='DateTime.Now' TValue="DateTime"> 
                    <DateTimePickerEvents TValue="DateTime" ValueChange="DateChangeHandler"></DateTimePickerEvents>
                </SfDateTimePicker>
            </div>

            <div class="input-box">
                <label>Home Team Id</label>
                <input type="number" @bind-value="@ug.HomeTeamId" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Away Team Id</label>
                <input type="number" @bind-value="@ug.AwayTeamId" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Favorite Id</label>
                <input type="number" @bind-value="@ug.FavoriteId" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Underdog Id</label>
                <input type="number" @bind-value="@ug.UnderdogId" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Point Spread</label>
                <SfTextBox @bind-value="@ug.PointSpread"></SfTextBox>
            </div>

            <div class="input-box">
                <label>Home Team Final Score</label>
                <input type="number" @bind-value="@ug.HomeTeamFinalScore" @bind-value:event="oninput"/>
            </div>

            <div class="input-box">
                <label>Away Team Final Score</label>
                <input type="number" @bind-value="@ug.AwayTeamFinalScore" @bind-value:event="oninput"/>
            </div>

           <div class="input-box">
                <label>Game Winner Id</label>
                <input type="number" @bind-value="@ug.GameWinnerId" @bind-value:event="oninput"/>
            </div>
            
            <div class="input-box">
                <label>Week</label>
                <input type="number" @bind-value="@ug.Week" @bind-value:event="oninput"/>
            </div>
            
            <div class="input-box">
                <label>Season Type</label>
                <SfTextBox  @bind-Value="@ug.Season" ></SfTextBox>  
            </div>
             
            <div class="input-box">
                <label>Game Status</label>
                <SfTextBox  @bind-Value="@ug.GameStatus" ></SfTextBox>  
            </div>

            <div style="margin-bottom: 2em;" class="input-box">
                <label>Score Id</label>
                <input type="number" @bind-value="@ug.ScoreId" @bind-value:event="oninput"/>
            </div>

            <div style="text-align:center;margin-bottom:2em;">
                 <button type="submit" class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase">Update Game</button>
            </div>

        </EditForm>
    </div>
</div>

@code {

    // Model
    UpdateGameDto ug = new();

    /// <summary>
    /// Async method for admin to insert a game into 
    /// the database
    /// </summary>
    /// <returns></returns>
    private async Task UpdateGame()
    {
        GameModel updatedGame = new();

        updatedGame.Id = ug.GameId;
        updatedGame.HomeTeamId = ug.HomeTeamId;
        updatedGame.AwayTeamId = ug.HomeTeamId;
        updatedGame.FavoriteId = ug.HomeTeamId;
        updatedGame.UnderdogId = ug.HomeTeamId;
        updatedGame.Stadium = ug.Stadium;
        updatedGame.PointSpread = double.Parse(ug.PointSpread);
        updatedGame.DateOfGame = ug.DateOfGame;
        updatedGame.HomeTeamFinalScore = ug.HomeTeamFinalScore;
        updatedGame.AwayTeamFinalScore = ug.AwayTeamFinalScore;
        updatedGame.GameWinnerId = ug.GameWinnerId;
        updatedGame.WeekNumber = ug.Week;

        if (ug.GameStatus == "IN_PROGRESS")
            updatedGame.GameStatus = GameStatus.IN_PROGRESS;
        else if (ug.GameStatus == "NOT_STARTED")
            updatedGame.GameStatus = GameStatus.NOT_STARTED;
        else if (ug.GameStatus == "FINISHED")
            updatedGame.GameStatus = GameStatus.FINISHED;
        updatedGame.ScoreId = ug.ScoreId;

        await gameData.UpdateGame(updatedGame);

        ug = new();
    }

    private async Task FetchAllScoresForFinishedGames() =>
        await gameService.FetchAllScoresForFinishedGames();

    private async Task GetPointSpreadUpdateForAvailableGames() => 
        await gameService.GetPointSpreadUpdateForAvailableGames();

    /// <summary>
    /// Method for value change for date of game
    /// </summary>
    /// <param name="args">DateTime representing date of game</param>
    private void DateChangeHandler(ChangedEventArgs<DateTime> args)
    {
        ug.DateOfGame = args.Value;
        StateHasChanged();
    }
}
