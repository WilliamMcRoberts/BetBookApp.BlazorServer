@page "/AdminPage"
@attribute [Authorize(Policy = "Admin")]
@inject ILogger<AdminPage> logger
@inject MediatR.IMediator _mediator
@using BetBookData.Helpers


<PageTitle>ADMIN</PageTitle>

<div style="text-align:center;">
    <h3 style="font-weight:700;">Admin</h3>
</div>

<div class="input">
    <div class="game-input">

        <div>
            <h3 style="font-weight: 700;margin-left: 1em;margin-top: .5em;" class="title">Manual Game Update</h3>
        </div>

        <div style="display:flex;justify-content:space-evenly;margin-bottom: 2em;">
            <div style="margin-top:2em;text-align:center;">
                <button @onclick="GetPointSpreadUpdateForAvailableGames" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase">
                    Fetch Scores
                </button>
            </div>
        </div>

        <EditForm Model="updateGameDto" OnValidSubmit="UpdateGame">

            <DataAnnotationsValidator />
            <ValidationSummary/>

            <div class="input-box">
                <label>Game Id</label>
                <input type="number" @bind-value="@updateGameDto.GameId" @bind-value:event="oninput" />
            </div>

            <div class="input-box">
                <label>Game Stadium</label>
                <SfTextBox @bind-Value="@updateGameDto.Stadium"></SfTextBox>
            </div>

            <div class="input-box">
                <label>Date Of Game</label>
                <SfDateTimePicker Min='DateTime.Now' TValue="DateTime"> 
                    <DateTimePickerEvents TValue="DateTime" ValueChange="DateChangeHandler"></DateTimePickerEvents>
                </SfDateTimePicker>
            </div>

            <div class="input-box">
                <label>Home Team Id</label>
                <input type="number" @bind-value="@updateGameDto.HomeTeamId" @bind-value:event="oninput" />
            </div>

            <div class="input-box">
                <label>Away Team Id</label>
                <input type="number" @bind-value="@updateGameDto.AwayTeamId" @bind-value:event="oninput" />
            </div>

            <div class="input-box">
                <label>Point Spread</label>
                <SfTextBox @bind-value="@updateGameDto.PointSpread"></SfTextBox>
            </div>

            <div class="input-box">
                <label>Home Team Final Score</label>
                <input type="number" @bind-value="@updateGameDto.HomeTeamFinalScore" @bind-value:event="oninput" />
            </div>

            <div class="input-box">
                <label>Away Team Final Score</label>
                <input type="number" @bind-value="@updateGameDto.AwayTeamFinalScore" @bind-value:event="oninput" />
            </div>

           <div class="input-box">
                <label>Game Winner Id</label>
                <input type="number" @bind-value="@updateGameDto.GameWinnerId" @bind-value:event="oninput" />
            </div>
            
            <div class="input-box">
                <label>Week</label>
                <input type="number" @bind-value="@updateGameDto.Week" @bind-value:event="oninput" />
            </div>
            
            <div class="input-box">
                <label>Season Type</label>
                <SfTextBox @bind-Value="@updateGameDto.Season"></SfTextBox>
            </div>
             
            <div class="input-box">
                <label>Game Status</label>
                <SfTextBox @bind-Value="@updateGameDto.GameStatus"></SfTextBox>
            </div>

            <div style="margin-bottom: 2em;" class="input-box">
                <label>Score Id</label>
                <input type="number" @bind-value="@updateGameDto.ScoreId" @bind-value:event="oninput" />
            </div>

            <div style="text-align:center;margin-bottom:2em;">
                 <button type="submit" class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase">Update Game</button>
            </div>

        </EditForm>
    </div>
</div>

@code {
    Season season;
    int week;
    UpdateGameDto updateGameDto = new();

    protected override void OnInitialized()
    {
       season = DateTime.Now.CalculateSeason();
        week = season.CalculateWeek(DateTime.Now);
    }

    private async Task UpdateGame()
    {
        GameModel updatedGame = new();

        updatedGame.Id = updateGameDto.GameId;
        updatedGame.HomeTeamId = updateGameDto.HomeTeamId;
        updatedGame.AwayTeamId = updateGameDto.HomeTeamId;
        updatedGame.Stadium = updateGameDto.Stadium;
        updatedGame.PointSpread = double.Parse(updateGameDto.PointSpread);
        updatedGame.DateOfGame = updateGameDto.DateOfGame;
        updatedGame.HomeTeamFinalScore = updateGameDto.HomeTeamFinalScore;
        updatedGame.AwayTeamFinalScore = updateGameDto.AwayTeamFinalScore;
        updatedGame.GameWinnerId = updateGameDto.GameWinnerId;
        updatedGame.WeekNumber = updateGameDto.Week;

        updatedGame.GameStatus = updateGameDto.GameStatus == "IN_PROGRESS" ? GameStatus.IN_PROGRESS
                                  : updateGameDto.GameStatus == "NOT_STARTED" ? GameStatus.NOT_STARTED
                                  :  GameStatus.FINISHED;

        updatedGame.ScoreId = updateGameDto.ScoreId;

        await _mediator.Send(new UpdateGameCommand(updatedGame));

        updateGameDto = new();
    }

    private async Task GetPointSpreadUpdateForAvailableGames() => 
        await _mediator.UpdateAll(week, season);

    private void DateChangeHandler(ChangedEventArgs<DateTime> args)
    {
        updateGameDto.DateOfGame = args.Value;
        StateHasChanged();
    }
}
