@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IBetData betData

<div class="user-info-strip">
    <div class="balance-strip-container" style="">
        <label>Balance</label>
        <div class="balance-strip" style="">
            <h6 style="text-align:center;font-size:30px;font-weight:700;margin:.25em auto;">$@Convert.ToDecimal(LoggedInUser?.AccountBalance).ToString("#,##0.00")</h6>
        </div>
    </div>
    
    <div class="balance-strip-container" style="">
        <label>Winning Bets</label>
        <div class="balance-strip" style="">
            <h6 style="text-align:center;font-size:30px;font-weight:700;margin:.25em auto;">@winningBetsByUser.Count + $@Convert.ToDecimal(profit).ToString("#,##0.00")</h6>
        </div>
    </div>

    <div class="balance-strip-container" style="">
        <label>Losing Bets</label>
        <div class="balance-strip" style="">
            <h6 style="text-align:center;font-size:30px;font-weight:700;margin:.25em auto;">@losingBetsByUser.Count - $@Convert.ToDecimal(loss).ToString("#,##0.00")</h6>
        </div>
    </div>
</div>




@code {

    [Parameter]
    public UserModel? LoggedInUser { get; set; }

    IEnumerable<BetModel>? bets;

    List<BetModel> betsByUser = new();

    List<BetModel> winningBetsByUser = new();

    decimal profit;

    decimal loss;

    List<BetModel> losingBetsByUser = new();

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        bets = await betData.GetBets();

        if (LoggedInUser is not null)
        {
            betsByUser = bets.Where(b => b.BettorId == LoggedInUser.Id).ToList();
            winningBetsByUser = betsByUser.Where(b => b.BetStatus == BetStatus.WINNER).ToList();
            losingBetsByUser = betsByUser.Where(b => b.BetStatus == BetStatus.LOSER).ToList();

            foreach(BetModel bet in winningBetsByUser)
            {
                profit += bet.BetPayout;
            }

            foreach(BetModel bet in losingBetsByUser)
            {
                loss += bet.BetAmount;
            }
        }
        
    }
}