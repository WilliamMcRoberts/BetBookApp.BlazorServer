@inject NavigationManager navManager
@inject IGameData gameData

@if(AvailableGameList is not null && AvailableGameList.Count != 0)
{
    foreach(GameModel g in AvailableGameList)
    {
        <div class="game-container">
            <div class="away-team">
                <label>Away</label>
                <img style="height:100px;" src="/images/@g.AwayTeam.ImagePath" alt="team logo">
                <div class="basic-record">
                    @if(g.AwayTeam.Wins is not null && g.AwayTeam.Losses is not null && g.AwayTeam.Draws is not null)
                    {
                        <p>@g.AwayTeam.Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@g.AwayTeam.Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@g.AwayTeam.Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    }
                </div>
            </div>
            <div class="game-details">
                <ul class="game-info mt-4">
                    <li class="team-item">@g.AwayTeam.TeamName at @g.HomeTeam.TeamName @g.PointSpreadDescription</li>
                    <li class="game-time-date">@g.DateOfGameOnly at @g.TimeOfGameOnly pm</li>
                </ul>

                <div class="bet-selection-single">
                    <button @onclick="(() => CreateBet(g.Id))" 
                        class="mb-4 site-btn btn site-btn-light btn-sm text-uppercase">
                        Place A Wager On Game
                    </button>
                </div>
            </div>
            <div class="home-team">
                <label>Home</label>
                <img style="height:100px;" src="/images/@g.HomeTeam.ImagePath" alt="team logo">
                <div class="basic-record">
                    @if(g.HomeTeam.Wins is not null && g.HomeTeam.Losses is not null && g.HomeTeam.Draws is not null)
                    {
                        <p>@g.HomeTeam.Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@g.HomeTeam.Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@g.HomeTeam.Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    }
                </div>
            </div>
        </div>
        
    }
}
else
{
    <h1 style="margin-top:2em;" class="title">There are no games currently available.</h1>
    <h1 style="margin-top:1em;" class="title">We'll have to wait until next week.</h1>
}


@code {

    [Parameter]
    public UserModel User { get; set; } = new();

    [Parameter]
    public List<GameModel> AvailableGameList { get; set; } = new();

    [Parameter]
    public IEnumerable<TeamModel>? Teams { get; set; }

    /// <summary>
    /// Selects a game to place a wager on and navigates to
    /// the create bet page
    /// </summary>
    /// <param name="gameId">
    /// int represents the id of game being selected
    /// </param>
    private void CreateBet(int gameId)
    {
        if(User is not null)
            navManager.NavigateTo($"/CreateBet/{gameId}");
        else
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }
}