@inject AuthenticationStateProvider authProvider
@inject IGameService gameService
@inject IConfiguration config
@inject ITransactionService transactionService
@inject ILogger<GameDetails> logger
@inject MediatR.IMediator _mediator


<div class="game-info-container">
    <h3 class="game-details">Game Details</h3>
    @if(CurrentGame is not null)
    {
        <div style="margin-bottom:1em;">
            <div style="margin-top:4em;text-align:center;">
                <h6 class="details">@CurrentGame.AwayTeam?.TeamName at @CurrentGame.HomeTeam?.TeamName @CurrentGame.PointSpreadDescription</h6>
                <h6 class="details">@CurrentGame.Stadium</h6>
                <h6 class="details">@CurrentGame.DateOfGameOnly at @CurrentGame.TimeOfGameOnly pm</h6>
            </div>
            
            <br />
            <div class="records">
                <div class="stat-records">
                    <div class="helmet">
                        <img style="height:100px;margin-bottom:1em;" src="/images/@CurrentGame.AwayTeam?.ImagePath" alt="team logo">
                    </div>
                    <div class="stat-container">

                        <Stat StatType="Wins"
                              Stats="CurrentGame.AwayTeam?.Wins.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Losses"
                              Stats="CurrentGame.AwayTeam?.Losses.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Draws"
                              Stats="CurrentGame.AwayTeam?.Draws.Split('|').SkipLast(1).ToArray()"/>
                    </div>
                </div>
                <div class="stat-records">
                    <div class="helmet">
                        <img style="height:100px;margin-bottom:1em;" src="/images/@CurrentGame.HomeTeam?.ImagePath" alt="team logo">
                    </div>
                    <div class="stat-container">

                        <Stat StatType="Wins"
                          Stats="CurrentGame.HomeTeam?.Wins.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Losses"
                              Stats="CurrentGame.HomeTeam?.Losses.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Draws"
                              Stats="CurrentGame.HomeTeam?.Draws.Split('|').SkipLast(1).ToArray()"/>
                    </div>
                </div>
            </div>
                <div>
                    @if (winnerChosen)
                    {
                        if (teamToWin?.TeamName == CurrentGame.AwayTeam?.TeamName)
                        {
                            <div class="details-buttons">
                                <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase"
                                    @onclick="() => UndoWinnerSelection()">
                                    Undo
                                    @teamToWin?.TeamName @GetSpread(teamToWin!.TeamName, CurrentGame.PointSpread)
                                </button>
                                <button disabled class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase"
                                    @onclick="(() => ChooseWinner(CurrentGame.HomeTeamId))">
                                    Choose
                                    @CurrentGame.HomeTeam?.TeamName @GetSpread(CurrentGame.HomeTeam!.TeamName, CurrentGame.PointSpread)
                                </button>
                            </div>
                        }

                        else if (teamToWin?.TeamName == CurrentGame.HomeTeam?.TeamName)
                        {
                            <div class="details-buttons">
                                <button disabled class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase"
                                    @onclick="(() => ChooseWinner(CurrentGame.AwayTeamId))">
                                    Choose
                                    @CurrentGame.AwayTeam?.TeamName @GetSpread(CurrentGame.AwayTeam!.TeamName, CurrentGame.PointSpread)
                                </button>
                                <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase"
                                    @onclick="UndoWinnerSelection">
                                    Undo
                                    @teamToWin?.TeamName @GetSpread(teamToWin!.TeamName, CurrentGame.PointSpread)
                                </button>
                            </div>
                                    
                        }
                    }
                    else if (!winnerChosen)
                    {
                        <div class="details-buttons">
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase"
                            @onclick="(() => ChooseWinner(CurrentGame.AwayTeamId))">
                                Choose
                                @CurrentGame.AwayTeam?.TeamName @GetSpread(CurrentGame.AwayTeam!.TeamName, CurrentGame.PointSpread)
                            </button>
                            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase"
                            @onclick="(() => ChooseWinner(CurrentGame.HomeTeamId))">
                                Choose
                                @CurrentGame.HomeTeam?.TeamName @GetSpread(CurrentGame.HomeTeam!.TeamName, CurrentGame.PointSpread)
                            </button>
                        </div>

                    }
                </div>
            </div>
    }
</div>
<div style="margin-top:.5em;" class="game-info-container">
    @if(wagerPlaced == false)
    {
        @if (teamToWinNull)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">YOU CANNOT SUBMIT A WAGER WITHOUT A CHOSEN WINNER</div>
        }
        @if(betAmountBad)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">YOU CANNOT SUBMIT A WAGER WITH A BET AMOUNT OF ZERO</div>
        }
        @if(gameNotStarted == false)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">@startedGameDescription HAS ALREADY STARTED...PLEASE CHOOSE ANOTHER GAME</div>
        }
        <div class="wager-box">
            <label style="text-align: center;margin: .5em auto;">Wager Amount</label>
            <input type="number" @bind-value="@betAmount" @bind-value:event="oninput"/>
        </div>  
        <div style="text-align:center;margin-top:1em;margin:0 auto;">
            <p style="margin: .5em 2em;">Your bet for $@betAmount.ToString("#,##0.00") is ready</p>
            <p style="margin: .5em 2em;">Your potential payout is $@GetPotentialBetPayout(betAmount).ToString("#,##0.00")</p>
            <p style="margin: .5em 2em;">If everything looks good click "Submit Wager"</p>
        </div>
        <div style="text-align:center; margin-top:2em;margin-bottom: 2em;" class="undo-btn-container">
            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                @onclick="SubmitSingleWager">
                Submit Wager
            </button>  
        </div>
    }
    else
    {
        <h3 style="text-align:center;margin-top:4em;margin-bottom:4em;">Good luck!</h3>
    }
</div>
<SfToast @ref="ToastObj" Timeout="0" ShowCloseButton="true" Title="Good Luck On Your New Wager!" Content="@Content">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>

<style>

    /*Toast Background*/
    .e-toast-container .e-toast { 
        /*Black w/opacity*/
        background-color: rgba(0,0,0, .9);
        border: 1px solid white;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
        /*Toast Background Hover*/
        .e-toast-container .e-toast:hover { 
            /*Black w/opacity*/
            background-color: rgba(0,0,0, .9);
        }

        /*Toast Title*/
        .e-toast-container .e-toast .e-toast-message .e-toast-title { 
            color: white;
            font-weight: 700;
        }

        /*Toast Content*/
        .e-toast-container .e-toast .e-toast-message .e-toast-content { 
            color: white;
            font-weight: 700;
        }

</style>

@code {

    [Parameter]
    public GameModel CurrentGame { get; set; } = new();
    private SfToast? ToastObj;
    private ToastEffect ShowAnimation = ToastEffect.FadeIn;
    private ToastEffect HideAnimation = ToastEffect.FadeOut;
    private string Content { get => $"LET'S GO {teamToWin?.TeamName}!"; }
    private decimal betAmount;
    private bool betAmountBad;
    private bool winnerChosen = false;
    private bool teamToWinNull;
    private TeamModel? teamToWin;
    private bool wagerPlaced = false;
    private bool gameNotStarted = true;
    private double VIG = .1;
    private IEnumerable<TeamModel>? teams;
    private string startedGameDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        teams = await _mediator.Send(new GetTeamsQuery());
    }

    private async Task SubmitSingleWager()
    {
        if (CurrentGame is null)
            return;

        if (betAmount == 0)
        {
            betAmountBad = true;
            return;
        }

        if (teamToWin is null)
        {
            teamToWinNull = true;
            return;
        }

        GameByScoreIdDto gameLookup =
            await gameService.GetGameByScoreId(CurrentGame.ScoreId);

        if (gameLookup.Score.HasStarted)
        {
            startedGameDescription = $"{CurrentGame.AwayTeam?.TeamName} at {CurrentGame.HomeTeam?.TeamName}";
            CurrentGame.GameStatus = GameStatus.IN_PROGRESS;
            await _mediator.Send(new UpdateGameCommand(CurrentGame));
            gameNotStarted = false;
            return;
        }

        HouseAccountModel? houseAccount = await _mediator.Send(new GetHouseAccountQuery());

        UserModel? loggedInUser = await authProvider.GetUserFromAuth(_mediator);

        BetModel bet = new();

        try
        {
            bet.BetAmount = betAmount;
            bet.BetPayout =
                (decimal)((double)betAmount - (double)betAmount * VIG);
            bet.ChosenWinnerId = teamToWin.Id;
            bet.BettorId = loggedInUser!.Id;
            bet.GameId = CurrentGame.Id;
            bet.PointSpread = CurrentGame.PointSpread;

        }
        catch (Exception ex)
        {
            logger.LogInformation(ex, "Exception On Creating Single Bet");
        }

        // Transaction method transfers funds from user account
        // to house account and inserts bet into the database
        bool transactionGood = await transactionService.CreateBetTransaction(
            loggedInUser, bet);

        if (transactionGood) 
            await this.ToastObj!.ShowAsync();

        wagerPlaced = true;
        CurrentGame = null!;
        betAmount = 0;
    }

    private void ChooseWinner(int teamId)
    {
        if(teamId == CurrentGame.AwayTeamId)
        {
            teamToWin = teams?.Where(t => t.Id == CurrentGame.AwayTeamId).FirstOrDefault();
            winnerChosen = true;
            return;
        }

        teamToWin = teams?.Where(t => t.Id == CurrentGame.HomeTeamId).FirstOrDefault();
        winnerChosen = true;
    }

    private void UndoWinnerSelection()
    {
        teamToWin = null;
        winnerChosen = false;
    }

    private string GetSpread(string teamName, double? pointSpread)
    {
        if(teamName == CurrentGame.AwayTeam?.TeamName)
        {
            return pointSpread < 0 ? $"+ {pointSpread * -1}" 
                   : pointSpread == 0 ? $"+ 0" 
                   : $"- {pointSpread}";
        }

        return pointSpread < 0 ? $"- {pointSpread?.ToString().Trim('-')}"
               : pointSpread == 0 ? $"+ 0" 
               : $"+ {pointSpread}";
    }

    private decimal GetPotentialBetPayout(decimal betAmount)
    {
        decimal betAmountMinusVig = betAmount - betAmount * (decimal).1;

        return betAmountMinusVig + betAmount;
    }
}





