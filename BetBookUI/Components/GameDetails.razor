@inject AuthenticationStateProvider authProvider
@inject IGameData gameData
@inject ITeamData teamData
@inject IGameService gameService
@inject IHouseAccountData houseData
@inject IConfiguration config
@inject IUserData userData
@inject IBetData betData


<div class="game-info-container">
    <h3 style="font-weight: 700;margin-top: .5em;" class="title">Game Details</h3>
    @if(CurrentGame is not null)
    {
        <div style="margin-bottom:1em;">
            <h6 class="title fw-bold">@CurrentGame.AwayTeam?.TeamName at @CurrentGame.HomeTeam?.TeamName @CurrentGame.PointSpreadDescription</h6>
            <h6 class="title fw-bold">@CurrentGame.Stadium</h6>
            <h6 class="title fw-bold">@CurrentGame.DateOfGameOnly at @CurrentGame.TimeOfGameOnly pm</h6>
            <br />
            <div class="records">
                <div class="stat-records">
                    <div class="helmet">
                        <img style="height:100px;margin-bottom:1em;" src="/images/@CurrentGame.AwayTeam?.ImagePath" alt="team logo">
                    </div>
                    <div class="stat-container">

                        <Stat StatType="Wins"
                              Stats="CurrentGame.AwayTeam?.Wins.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Losses"
                              Stats="CurrentGame.AwayTeam?.Losses.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Draws"
                              Stats="CurrentGame.AwayTeam?.Draws.Split('|').SkipLast(1).ToArray()"/>
                    </div>
                    
                    <div class="mt-4 mb-2 team-selection-container">
                        @if(winnerChosen)
                        {
                            if(teamToWin?.TeamName == CurrentGame.AwayTeam?.TeamName)
                            {
                                <button class="mb-2 mt-2 undo-btn-det btn undo-btn-det-light btn-sm text-uppercase" 
                                    @onclick="() => UndoWinnerSelection()">
                                    Undo
                                    @teamToWin?.TeamName @GetSpread(teamToWin!.TeamName, CurrentGame.PointSpread)
                                </button>
                            }
                            else
                            {
                                <button disabled class="mb-2 mt-2 site-btn-det btn site-btn-det-light btn-sm text-uppercase" 
                                    @onclick="(() => ChooseWinner(CurrentGame.AwayTeamId))">
                                    Choose
                                    @CurrentGame.AwayTeam?.TeamName @GetSpread(CurrentGame.AwayTeam!.TeamName, CurrentGame.PointSpread)
                                </button>
                            }
                        }
                        else if(!winnerChosen)
                        {
                            <button class="mb-2 mt-2 site-btn-det btn site-btn-det-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinner(CurrentGame.AwayTeamId))">
                                Choose
                                @CurrentGame.AwayTeam?.TeamName @GetSpread(CurrentGame.AwayTeam!.TeamName, CurrentGame.PointSpread)
                            </button>
                        }
                    </div>
                    
                </div>
                <div class="stat-records">
                    <div class="helmet">
                        <img style="height:100px;margin-bottom:1em;" src="/images/@CurrentGame.HomeTeam?.ImagePath" alt="team logo">

                    </div>
                    <div class="stat-container">

                        <Stat StatType="Wins"
                          Stats="CurrentGame.HomeTeam?.Wins.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Losses"
                              Stats="CurrentGame.HomeTeam?.Losses.Split('|').SkipLast(1).ToArray()"/>

                        <Stat StatType="Draws"
                              Stats="CurrentGame.HomeTeam?.Draws.Split('|').SkipLast(1).ToArray()"/>
                    </div>
                     
                <div class="mt-4 mb-2 team-selection-container">
                    @if(winnerChosen)
                    {
                        if(teamToWin?.TeamName == CurrentGame.HomeTeam?.TeamName)
                        {
                            <button class="mb-2 mt-2 undo-btn-det btn undo-btn-det-light btn-sm text-uppercase" 
                                @onclick="UndoWinnerSelection">
                                Undo
                                @teamToWin?.TeamName @GetSpread(teamToWin!.TeamName, CurrentGame.PointSpread)
                            </button>
                        }
                        else
                        {
                            <button disabled class="mb-2 mt-2 site-btn-det btn site-btn-det-light btn-sm text-uppercase" 
                                @onclick="(() => ChooseWinner(CurrentGame.HomeTeamId))">
                                Choose 
                                @CurrentGame.HomeTeam?.TeamName @GetSpread(CurrentGame.HomeTeam!.TeamName, CurrentGame.PointSpread)
                            </button>
                        }
                    }
                    else if(!winnerChosen)
                    {
                        <button class="mb-2 mt-2 site-btn-det btn site-btn-det-light btn-sm text-uppercase" 
                            @onclick="(() => ChooseWinner(CurrentGame.HomeTeamId))">
                            Choose
                            @CurrentGame.HomeTeam?.TeamName @GetSpread(CurrentGame.HomeTeam!.TeamName, CurrentGame.PointSpread)
                        </button>
                    }
                </div>
                </div>
            </div>
        </div>
    }
</div>
<div style="margin-top:.5em;" class="game-info-container">
    @if(wagerPlaced == false)
    {
        @if (teamToWinNull)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">YOU CANNOT SUBMIT A WAGER WITHOUT A CHOSEN WINNER</div>
        }
        @if(betAmountBad)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">YOU CANNOT SUBMIT A WAGER WITH A BET AMOUNT OF ZERO</div>
        }
        @if(gameNotStarted == false)
        {
            <div style="color:red;text-align:center;font-size:15px;font-weight:700;margin:1em .5em;">@startedGameDescription HAS ALREADY STARTED...PLEASE CHOOSE ANOTHER GAME</div>
        }
        <div class="wager-box">
            <label style="text-align: center;margin: .5em auto;">Wager Amount</label>
            <input type="number" @bind-value="@betAmount" @bind-value:event="oninput"/>
        </div>  
        <div style="text-align:center;margin-top:1em;margin:0 auto;">
            <p style="margin: .5em auto;">Your bet for $@betAmount is ready.</p>
            <p style="margin: .5em auto;">If everything looks good click "Submit Wager"</p>
        </div>
        <div style="text-align:center; margin-top:2em;margin-bottom: 2em;" class="undo-btn-container">
            <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                @onclick="SubmitSingleWager">
                Submit Wager
            </button>  
        </div>
    }
    else
    {
        <h3 style="text-align:center;margin-top:4em;margin-bottom:4em;">Good luck!</h3>
    }
</div>

@code {

    [Parameter]
    public GameModel CurrentGame { get; set; } = new();

    private decimal betAmount;

    private bool betAmountBad;

    private bool winnerChosen = false;

    private bool teamToWinNull;

    private TeamModel? teamToWin;

    private bool wagerPlaced = false;

    private bool gameNotStarted = true;

    private double VIG = .1;

    private IEnumerable<TeamModel>? teams;

    private string startedGameDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(teams is null)
            teams = await teamData.GetTeams();
    }

    private async Task SubmitSingleWager()
    {
        if (betAmount == 0)
        {
            betAmountBad = true;
            return;
        }

        if (teamToWin is null)
        {
            teamToWinNull = true;
            return;
        }

        GameByScoreIdDto gameLookup =
            await gameService.GetGameByScoreId(CurrentGame.ScoreId);

        if (gameLookup.Score.HasStarted)
        {
            startedGameDescription = $"{CurrentGame.AwayTeam?.TeamName} at {CurrentGame.HomeTeam?.TeamName}";
            CurrentGame.GameStatus = GameStatus.IN_PROGRESS;
            await gameData.UpdateGame(CurrentGame);
            gameNotStarted = false;
            return;
        }

        BetModel bet = new();

        HouseAccountModel? houseAccount =
            await houseData.GetHouseAccount();

        UserModel loggedInUser = await authProvider.GetUserFromAuth(userData);

        bet.BetAmount = betAmount;
        bet.BetPayout =
            (decimal)((double)betAmount - (double)betAmount * VIG);
        bet.ChosenWinnerId = teamToWin.Id;
        bet.BettorId = loggedInUser!.Id;
        bet.GameId = CurrentGame.Id;

        loggedInUser.AccountBalance -= bet.BetAmount;
        houseAccount!.AccountBalance += bet.BetAmount;

        // Transaction method transfers funds from user account
        // to house account and inserts bet into the database
        await loggedInUser.CreateBetTransaction(
            bet, houseAccount, config, userData, houseData, betData);

        wagerPlaced = true;
        CurrentGame = null!;
        betAmount = 0;
    }

    /// <summary>
    /// Async method to select chosen winner of game
    /// and grab that team from the database
    /// </summary>
    /// <param name="teamId">int representing the Id of the team being chosen</param>
    /// <returns></returns>
    private void ChooseWinner(int teamId)
    {
        if(teamId == CurrentGame.AwayTeamId)
        {
            teamToWin = 
                teams?.Where(t => t.Id == CurrentGame.AwayTeamId).FirstOrDefault();
            winnerChosen = true;
            return;
        }

        teamToWin = 
            teams?.Where(t => t.Id == CurrentGame.HomeTeamId).FirstOrDefault();
        winnerChosen = true;
    }

    /// <summary>
    /// Method reverts a winner selection
    /// </summary>
    private void UndoWinnerSelection()
    {
        teamToWin = null;
        winnerChosen = false;
    }

    private string GetSpread(string teamName, double? pointSpread)
    {
        if(teamName == CurrentGame.AwayTeam?.TeamName)
        {
            return pointSpread < 0 ? $"+ {pointSpread * -1}" 
                   : pointSpread == 0 ? $"+ 0" 
                   : $"- {pointSpread}";
        }
        
        return pointSpread < 0 ? $"- {pointSpread?.ToString().Trim('-')}"
               : pointSpread == 0 ? $"+ 0" 
               : $"+ {pointSpread}";
    }
}





