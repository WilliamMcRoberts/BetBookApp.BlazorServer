
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IBetData betData
@inject IGameData gameData
@inject ITeamData teamData
@inject IHouseAccountData houseData
@inject IConfiguration config
@inject IGameService gameService

@************************************* Demo Display **********************************************@


<div class="wager-form-container">
    <h3 style="font-weight: 700;margin-top: .5em;" class="title">Create A Wager</h3>
    @if(CurrentGame is not null)
{
        @if(wagerPlaced == false)
        {
            <div>
                @if(betAmountBad)
                {
                    <div style="color:red;text-align:center;">*BET AMOUNT MUST BE MORE THAN ZERO*</div>
                }
                else if(gameNotStarted == false)
                {
                    <div style="color:red;text-align:center;">*GAME HAS ALREADY STARTED*</div>
                }
                <div style="text-align:center;padding-top:1em;">
                    <label>Account Balance: $@loggedInUser?.AccountBalance</label>
                </div>
                <div class="wager-box">
                    
                    <label style="text-align: center;">Wager Amount</label>
                    <input type="number" @bind-value="@betAmount" @bind-value:event="oninput"/>
                </div>
            </div>
        }

        @if (winnerChosen == false)
        {
            <div class="review">
                <p>#1 Enter a wager amount</p>
                <p>#2 Choose a winner</p>
                <p>#3 Click "Submit Wager"</p>
            </div>
            <div class="winner-btn-container">
                <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                    @onclick="(() => ChooseWinner(CurrentGame.HomeTeamId))">
                    Choose @CurrentGame.Favorite.TeamName @CurrentGame.PointSpreadDescription.Substring(0, 5)
                </button>
                <button class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" 
                    @onclick="(() => ChooseWinner(CurrentGame.AwayTeamId))">
                    Choose @CurrentGame.AwayTeam.TeamName @InvertSpread(CurrentGame.PointSpread)
                </button>
            </div>
        }
        else if(winnerChosen == true && wagerPlaced == false)
        {
            <div class="review">
                <label class="local" style="padding: .25em .25em;margin-bottom: .5em;">Bet Summary</label>
                @if(teamToWin is not null)
                {
                        @if(teamToWin.TeamName == CurrentGame.HomeTeam.TeamName)
                        {
                            <p>You've chosen @teamToWin.TeamName @CurrentGame.PointSpreadDescription</p>
                        }
                        else
                        {
                            <p>You've chosen @teamToWin.TeamName @InvertSpread(CurrentGame.PointSpread) points</p>
                        }
                    <p>For $@betAmount</p>
                    <div style="margin-top:3.4em;" class="undo-btn-container">
                        @if(teamToWin.TeamName == CurrentGame.HomeTeam.TeamName)
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="UndoWinnerSelection">
                                Undo @teamToWin.TeamName @CurrentGame.PointSpreadDescription.Substring(0, 5)
                            </button>
                        }
                        else
                        {
                            <button class="mb-2 mt-2 undo-btn btn undo-btn-light btn-sm text-uppercase" 
                                @onclick="UndoWinnerSelection">
                                Undo @teamToWin.TeamName @InvertSpread(CurrentGame.PointSpread)
                            </button>
                        }
                    </div>
                }
            </div>
        }
        else if(wagerPlaced == true)
        {
            <p style="text-align:center;">
                Good luck on your new wager! Click "Home" to browse more games.
            </p>
        }
}
    @if(wagerPlaced == false)
    {
        <div style="padding: 2em .25em;text-align:center;">
            <button class="mt-2 mb-4 site-btn btn site-btn-light btn-sm text-uppercase"
                @onclick="(() => PlaceWager(betAmount, teamToWin!))">
                Submit Wager
        </button>
        </div>
    }
</div>

@code {

    // Boolean to check if wager has been placed
    private bool wagerPlaced = false;

    // bool to check if game has started
    private bool gameNotStarted = true;

    // Boolean sets to true when a winner is chosen
    private bool winnerChosen = false;

    // Boolean to check if bet amount is good
    private bool betAmountBad = false;

    // 10% vigorish for all bets
    private double VIG = .1;

    // Amount to bet
    private decimal betAmount;

    // Chosen winner of game
    private TeamModel? teamToWin;

    // Current game being viewed
    [Parameter]
    public GameModel? CurrentGame { get; set; } = new();


    // Current logged in user
    public UserModel? loggedInUser;

    public IEnumerable<TeamModel> teams;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        loggedInUser.AccountBalance = 
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));

        teams = await teamData.GetTeams();
    }


    /// <summary>
    /// Async method to update bet info, insert a new bet
    /// into the database, update user account balance, and
    /// update the house account balance
    /// </summary>
    /// <param name="amountToBet">
    /// decimal representing the amount of money 
    /// the user is wagering on the bet
    /// </param>
    /// <param name="teamToWin">
    /// TeamModel representing the team that the user has chosen
    /// to be the winner of the game
    /// </param>
    /// <returns></returns>
    private async Task PlaceWager(decimal amountToBet, TeamModel teamToWin)
    {
        if (CurrentGame is not null && amountToBet != 0)
        {
            bool hasStarted;

            GameLookup? gameLookup = 
                await gameService.GetGameByScoreIdLookup(CurrentGame.ScoreId);

            if(gameLookup is not null)
            {
                hasStarted = gameLookup.Score.HasStarted;

                if (hasStarted == false)
                {
                    BetModel bet = new();

                    HouseAccountModel? houseAccount =
                        await houseData.GetHouseAccount();

                    bet.BetAmount = amountToBet;
                    bet.BetPayout =
                        (decimal)((double)amountToBet - (double)amountToBet * VIG);
                    bet.ChosenWinnerId = teamToWin.Id;
                    bet.BettorId = loggedInUser!.Id;
                    bet.GameId = CurrentGame.Id;

                    loggedInUser.AccountBalance -= bet.BetAmount;
                    houseAccount!.AccountBalance += bet.BetAmount;

                    // Transaction method transfers funds from user account
                    // to house account and inserts bet into the database
                    await loggedInUser.CreateBetTransaction(
                        bet, houseAccount, config, userData, houseData, betData);

                    wagerPlaced = true;
                    CurrentGame = null;
                    amountToBet = 0;
                }

                else
                    gameNotStarted = false;
            }
        }

        else
            betAmountBad = true;
    }

    /// <summary>
    /// Async method to select chosen winner of game
    /// and grab that team from the database
    /// </summary>
    /// <param name="teamId">int representing the Id of the team being chosen</param>
    /// <returns></returns>
    private void ChooseWinner(int teamId)
    {
        if(teamId == CurrentGame?.FavoriteId)
        {
            teamToWin = 
                teams.Where(t => t.Id == CurrentGame.FavoriteId).FirstOrDefault();
            winnerChosen = true;
        }

        else if(teamId == CurrentGame?.UnderdogId)
        {
            teamToWin = 
                teams.Where(t => t.Id == CurrentGame.UnderdogId).FirstOrDefault();
            winnerChosen = true;
        }
    }

    /// <summary>
    /// Method reverts a winner selection
    /// </summary>
    private void UndoWinnerSelection()
    {
        teamToWin = null;
        winnerChosen = false;
    }

    private string InvertSpread(double pointSpread)
    {
        if (pointSpread < 0)
            return $"+ {pointSpread * -1}";
        else if (pointSpread == 0)
            return $"+ 0";
        else
            return $"- {pointSpread}";
    }

    /// <summary>
    /// Syncfusion method for numeric text box on value change
    /// </summary>
    /// <param name="args"></param>
    public void OnChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<decimal> args)
    {
        betAmount = (decimal)args.Value;
        StateHasChanged();
    }
}


